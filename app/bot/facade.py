from __future__ import annotations
import asyncio
import logging
from datetime import datetime, time as dtime
from typing import Optional
import os
from html import escape
from solders.keypair import Keypair

from aiogram import Bot

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core
from app.core.bablo_bot import Bablo, BabloConfig
from app.core.constants import LAMPORTS_PER_SOL
from app.core.utils import lamports_to_sol  # –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
from app.core.wallet_manager import WalletManager     # —É —Ç–µ–±—è —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –≤ wallet_manager.py
from app.core.client import SolanaClient     # –∫–∞–∫ –≤ —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª—è—Ö

from .config import AppConfig, save_config
from .logs import TelegramLogHandler


async def maybe_await(maybe_awaitable):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–∞–∫ sync, —Ç–∞–∫ –∏ async —Ñ—É–Ω–∫—Ü–∏–∏."""
    if hasattr(maybe_awaitable, "__await__"):
        return await maybe_awaitable
    return maybe_awaitable


def cast_string_to_type(s: str):
    """–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫ —á–∏—Å–ª–∞–º, —Å–ø–∏—Å–∫–∞–º –∏–ª–∏ bool."""
    s = s.strip()
    if s.isdigit():
        return int(s)
    try:
        if "." in s:
            return float(s)
    except Exception:
        pass
    if s.lower() in ("true", "1", "yes", "on"):
        return True
    if s.lower() in ("false", "0", "no", "off"):
        return False
    if " " in s or "," in s:
        parts = [p.strip() for p in (s.replace(",", " ").split()) if p.strip()]
        converted = []
        for p in parts:
            if p.isdigit():
                converted.append(int(p))
            else:
                try:
                    converted.append(float(p))
                except Exception:
                    converted.append(p)
        return converted
    return s


async def _apply_config(controller, key: str, value: str) -> tuple[bool, str]:
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É."""
    try:
        if hasattr(controller, "update_config"):
            await maybe_await(controller.update_config(key, value))
            return True, f"Param <b>{escape(key)}</b> updated via controller.update_config."
    except Exception as e:
        return False, f"update_config failed: {escape(str(e))}"

    try:
        cfg = getattr(controller, "cfg", None)
        if cfg is None:
            return False, "Controller has no cfg attribute; cannot apply."
        cast_val = cast_string_to_type(value)
        if hasattr(cfg, key):
            setattr(cfg, key, cast_val)
            return True, f"Param <b>{escape(key)}</b> set to <code>{escape(str(value))}</code> on cfg."
        try:
            setattr(cfg, key, cast_val)
            return True, f"Param <b>{escape(key)}</b> created/updated on cfg."
        except Exception as e:
            return False, f"Cannot set attribute {escape(key)} on cfg: {escape(str(e))}"
    except Exception as e:
        return False, f"Failed to apply config: {escape(str(e))}"

log = logging.getLogger("tg-controller")


class BabloController:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: –¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–≥, –∫–æ—à–µ–ª—å–∫–∏, –∏–Ω—Å—Ç–∞–Ω—Å Bablo, —à–ª—ë—Ç —Å—Ç–∞—Ç—É—Å—ã –≤ –¢–ì,
    –¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã start/stop –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞–º–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    def __init__(self, cfg: AppConfig, bot: Optional[Bot], admin_chat_id: Optional[int]):
        self.cfg = cfg
        self.bot = bot
        self.admin_chat_id = admin_chat_id

        # –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –æ–±—ä–µ–∫—Ç—ã
        self.wallets: Optional[WalletManager] = None
        self.bablo: Optional[Bablo] = None

        # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        self._autorun_task: Optional[asyncio.Task] = None
        self._run_lock = asyncio.Lock()

        # –õ–æ–≥ –≤ –¢–ì (—É—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ—Ç –∏ admin)
        self._install_telemetry_logger()

    # ---------- Logger to Telegram ----------
    def _install_telemetry_logger(self):
        # –ù–µ —Å–æ–∑–¥–∞—ë–º handler –µ—Å–ª–∏ –Ω–µ—Ç –±–æ—Ç–∞ –∏–ª–∏ admin id ‚Äî –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º AttributeError –ø—Ä–∏ —Ä–∞–Ω–Ω–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if self.bot is None or self.admin_chat_id is None:
            log.debug("Telegram logger not installed: bot or admin_chat_id is None")
            return

        try:
            # –ü–µ—Ä–µ–¥–∞—ë–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ send_message; TelegramLogHandler —Ä–∞–±–æ—Ç–∞–µ—Ç —Å async send_fn
            handler = TelegramLogHandler(
                send_fn=self.bot.send_message,
                chat_id=self.admin_chat_id,
                level=logging.INFO
            )
            formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(name)s: %(message)s")
            handler.setFormatter(formatter)
            logging.getLogger().addHandler(handler)
            log.debug("Telegram telemetry logger installed")
        except Exception as e:
            log.exception("Failed to install TelegramLogHandler: %s", e)

    # ---------- Helpers ----------
    async def _send(self, text: str, *, parse_mode: str = "HTML"):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫—É –∑–∞—Ä–∞–Ω–µ–µ –≤ –∫–æ–¥–µ –≤—ã–∑–æ–≤–∞.
        """
        if self.bot is None or self.admin_chat_id is None:
            log.warning("Attempt to send message but bot/admin_chat_id not set: %s", text)
            return
        try:
            await self.bot.send_message(self.admin_chat_id, text, parse_mode=parse_mode)
        except Exception as e:
            log.exception("Failed to send message to admin: %s", e)

    def _build_bablo(self) -> Bablo:
        bc = self.cfg.bablo
        # BabloConfig –∏–∑ —Ç–≤–æ–µ–≥–æ core
        bablo_cfg = BabloConfig(
            token_amount_ui=bc.token_amount_ui,
            wsol_amount_ui=bc.wsol_amount_ui,
            profit_threshold_sol=bc.profit_threshold_sol,
            cycle_timeout_sec=bc.cycle_timeout_sec,
            mode=bc.mode,
        )

        # –ö–æ–ª–ª–±—ç–∫–∏ –≤ –¢–ì - —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫—É –≤ <pre>
        async def on_status(msg: str):
            safe = escape(str(msg))
            await self._send(f"üü¢ <b>Status</b>\n<pre>{safe}</pre>")

        async def on_alert(msg: str):
            safe = escape(str(msg))
            await self._send(f"üü† <b>Alert</b>\n<pre>{safe}</pre>")

        async def get_ca() -> str:
            ca = self.cfg.bablo.last_ca
            if not ca:
                raise RuntimeError("CA –Ω–µ –∑–∞–¥–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /set_ca <MINT>")
            return ca

        b = Bablo(
            cfg=bablo_cfg,
            on_status=on_status,
            on_alert=on_alert,
            get_ca=get_ca,
        )
        return b

    async def _ensure_wallets(self):
        if self.wallets is None:
            # –°–æ–∑–¥–∞—ë–º WalletManager –ª–µ–Ω–∏–≤–æ. WalletManager –≤ —Ç–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å SolanaClient —ç–∫–∑–µ–º–ø–ª—è—Ä.
            # –ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞—ë–º None –µ—Å–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å SolanaClient(...) –∏ –ø–µ—Ä–µ–¥–∞—Ç—å.
            try:
                self.wallets = WalletManager(client=None)  # type: ignore[arg-type]
            except Exception:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç (fallback)
                try:
                    client = SolanaClient(os.getenv("RPC_HTTP_URL", ""))
                    self.wallets = WalletManager(client=client)  # type: ignore[arg-type]
                except Exception as e:
                    log.exception("Failed to create WalletManager: %s", e)
                    raise
        return self.wallets

    # ---------- Public API ----------
    async def set_ca(self, ca: str):
        self.cfg.bablo.last_ca = ca.strip()
        save_config(self.cfg)
        await self._send(f"üìå –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CA: <code>{escape(self.cfg.bablo.last_ca)}</code>")

    async def set_param(self, key: str, value: str):
        bcfg = self.cfg.bablo
        k = key.lower()

        if k == "token_amount_ui":
            bcfg.token_amount_ui = [int(v) for v in value.replace(",", " ").split()]
        elif k == "wsol_amount_ui":
            bcfg.wsol_amount_ui = [float(v) for v in value.replace(",", " ").split()]
        elif k == "profit":
            bcfg.profit_threshold_sol = float(value)
        elif k == "timeout":
            bcfg.cycle_timeout_sec = int(value)
        elif k == "mode":
            if value not in ("manual", "auto"):
                raise ValueError("mode must be manual|auto")
            bcfg.mode = value
        elif k == "interval":
            bcfg.schedule.interval_sec = int(value)
        elif k == "active":
            # —Ñ–æ—Ä–º–∞—Ç HH:MM-HH:MM
            parts = value.split("-")
            if len(parts) != 2:
                raise ValueError("active format: HH:MM-HH:MM")
            bcfg.schedule.active_from = parts[0].strip()
            bcfg.schedule.active_to = parts[1].strip()
        elif k == "autorun":
            flag = value.strip().lower() in ("1", "on", "true", "yes")
            bcfg.schedule.enabled = flag
            # –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —Ü–∏–∫–ª
            if flag and not self._autorun_task:
                self._autorun_task = asyncio.create_task(self._autorun_loop())
            elif not flag and self._autorun_task:
                self._autorun_task.cancel()
                self._autorun_task = None
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {key}")

        save_config(self.cfg)
        await self._send(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä <b>{escape(key)}</b> –æ–±–Ω–æ–≤–ª—ë–Ω.")

    async def run_once(self):
        async with self._run_lock:
            if self.bablo is not None and self.bablo._worker_task and not self.bablo._worker_task.done():
                await self._send("‚ö†Ô∏è –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ü–∏–∫–ª. –°–Ω–∞—á–∞–ª–∞ /stop.")
                return

            self.bablo = self._build_bablo()

            dry = os.getenv("DRY_MODE", "1").lower() in ("1", "true", "on")
            if dry:
                self.bablo.dev = Keypair()
                dev_pub = self.bablo.dev.pubkey()
            else:
                wallets = await self._ensure_wallets()
                self.bablo.dev = wallets.dev
                dev_pub = wallets.dev_pubkey

            # –°–æ–±–∏—Ä–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫—É)
            msg = (
                "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞\n"
                f"‚Ä¢ mode: <code>{escape(str(self.cfg.bablo.mode))}</code>\n"
                f"‚Ä¢ token_amount_ui: <code>{escape(str(self.cfg.bablo.token_amount_ui))}</code>\n"
                f"‚Ä¢ wsol_amount_ui: <code>{escape(str(self.cfg.bablo.wsol_amount_ui))}</code>\n"
                f"‚Ä¢ profit_threshold: <code>{escape(str(self.cfg.bablo.profit_threshold_sol))} SOL</code>\n"
                f"‚Ä¢ timeout: <code>{escape(str(self.cfg.bablo.cycle_timeout_sec))}s</code>\n"
                f"‚Ä¢ dev pubkey: <code>{escape(str(dev_pub))}</code>"
            )
            await self._send(msg)
            self.bablo.start()

    async def stop(self):
        async with self._run_lock:
            if self.bablo is None:
                await self._send("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.")
                return
            await self.bablo.stop()
            await self._send("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            self.bablo = None

    def _within_active_window(self) -> bool:
        sched = self.cfg.bablo.schedule

        def _parse(hhmm: str) -> dtime:
            hh, mm = [int(x) for x in hhmm.split(":")]
            return dtime(hh, mm)

        now = datetime.now().time()
        a, b = _parse(sched.active_from), _parse(sched.active_to)
        if a <= b:
            return a <= now <= b
        # –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        return now >= a or now <= b

    async def _autorun_loop(self):
        await self._send("‚ôªÔ∏è –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω.")
        try:
            while self.cfg.bablo.schedule.enabled:
                if self._within_active_window():
                    await self.run_once()
                    # –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ –∏–ª–∏ —Ç–∞–π–º–µ—Ä–∞
                    if self.bablo and self.bablo._worker_task:
                        try:
                            await self.bablo._worker_task
                        except asyncio.CancelledError:
                            pass
                        self.bablo = None
                # –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(self.cfg.bablo.schedule.interval_sec)
        except asyncio.CancelledError:
            pass
        finally:
            await self._send("üõë –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω.")
